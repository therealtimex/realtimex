import{A as s,ac as n}from"../index.js";const a={users:async()=>await fetch(`${s}/admin/users`,{method:"GET",headers:n()}).then(e=>e.json()).then(e=>(e==null?void 0:e.users)||[]).catch(e=>(console.error(e),[])),newUser:async e=>await fetch(`${s}/admin/users/new`,{method:"POST",headers:n(),body:JSON.stringify(e)}).then(r=>r.json()).catch(r=>(console.error(r),{user:null,error:r.message})),updateUser:async(e,r)=>await fetch(`${s}/admin/user/${e}`,{method:"POST",headers:n(),body:JSON.stringify(r)}).then(t=>t.json()).catch(t=>(console.error(t),{success:!1,error:t.message})),deleteUser:async e=>await fetch(`${s}/admin/user/${e}`,{method:"DELETE",headers:n()}).then(r=>r.json()).catch(r=>(console.error(r),{success:!1,error:r.message})),invites:async()=>await fetch(`${s}/admin/invites`,{method:"GET",headers:n()}).then(e=>e.json()).then(e=>(e==null?void 0:e.invites)||[]).catch(e=>(console.error(e),[])),newInvite:async({role:e=null,workspaceIds:r=null})=>await fetch(`${s}/admin/invite/new`,{method:"POST",headers:n(),body:JSON.stringify({role:e,workspaceIds:r})}).then(t=>t.json()).catch(t=>(console.error(t),{invite:null,error:t.message})),disableInvite:async e=>await fetch(`${s}/admin/invite/${e}`,{method:"DELETE",headers:n()}).then(r=>r.json()).catch(r=>(console.error(r),{success:!1,error:r.message})),workspaces:async()=>await fetch(`${s}/admin/workspaces`,{method:"GET",headers:n()}).then(e=>e.json()).then(e=>(e==null?void 0:e.workspaces)||[]).catch(e=>(console.error(e),[])),workspaceUsers:async e=>await fetch(`${s}/admin/workspaces/${e}/users`,{method:"GET",headers:n()}).then(r=>r.json()).then(r=>(r==null?void 0:r.users)||[]).catch(r=>(console.error(r),[])),newWorkspace:async e=>await fetch(`${s}/admin/workspaces/new`,{method:"POST",headers:n(),body:JSON.stringify({name:e})}).then(r=>r.json()).catch(r=>(console.error(r),{workspace:null,error:r.message})),updateUsersInWorkspace:async(e,r=[])=>await fetch(`${s}/admin/workspaces/${e}/update-users`,{method:"POST",headers:n(),body:JSON.stringify({userIds:r})}).then(t=>t.json()).catch(t=>(console.error(t),{success:!1,error:t.message})),deleteWorkspace:async e=>await fetch(`${s}/admin/workspaces/${e}`,{method:"DELETE",headers:n()}).then(r=>r.json()).catch(r=>(console.error(r),{success:!1,error:r.message})),systemPreferences:async()=>await fetch(`${s}/admin/system-preferences`,{method:"GET",headers:n()}).then(e=>e.json()).catch(e=>(console.error(e),null)),systemPreferencesByFields:async(e=[])=>await fetch(`${s}/admin/system-preferences-for?labels=${e.join(",")}`,{method:"GET",headers:n()}).then(r=>r.json()).catch(r=>(console.error(r),null)),updateSystemPreferences:async(e={})=>await fetch(`${s}/admin/system-preferences`,{method:"POST",headers:n(),body:JSON.stringify(e)}).then(r=>r.json()).catch(r=>(console.error(r),{success:!1,error:r.message})),getApiKeys:async function(){return fetch(`${s}/admin/api-keys`,{method:"GET",headers:n()}).then(e=>{if(!e.ok)throw new Error(e.statusText||"Error fetching api keys.");return e.json()}).catch(e=>(console.error(e),{apiKeys:[],error:e.message}))},generateApiKey:async function(){return fetch(`${s}/admin/generate-api-key`,{method:"POST",headers:n()}).then(e=>{if(!e.ok)throw new Error(e.statusText||"Error generating api key.");return e.json()}).catch(e=>(console.error(e),{apiKey:null,error:e.message}))},deleteApiKey:async function(e=""){return fetch(`${s}/admin/delete-api-key/${e}`,{method:"DELETE",headers:n()}).then(r=>r.ok).catch(r=>(console.error(r),!1))}},c=a;export{c as A};
